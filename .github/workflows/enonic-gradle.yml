name: Gradle Build

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.1

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - run: ./gradlew build

      - uses: codecov/codecov-action@v1.0.10

      - name: Read version property
        id: read_version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: './gradle.properties'
          property: 'version'

      - name: Read projectName property
        id: read_project_name
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: './gradle.properties'
          property: 'projectName'

      - name: Publish to snapshot repository
        if: "contains(steps.read_version.outputs.value, '-SNAPSHOT') && github.ref == 'refs/heads/master'"
        run: ./gradlew publish -PrepoKey=snapshot -PrepoUser=${{ secrets.ARTIFACTORY_USERNAME }} -PrepoPassword=${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Publish to release repository
        if: "!contains(steps.read_version.outputs.value, '-SNAPSHOT') && github.ref == 'refs/heads/master'"
        run: ./gradlew publish -PrepoKey=public -PrepoUser=${{ secrets.ARTIFACTORY_USERNAME }} -PrepoPassword=${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Create Release
        if: "!contains(steps.read_version.outputs.value, '-SNAPSHOT') && github.ref == 'refs/heads/master'"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.read_version.outputs.value }}
          release_name: GraphQL lib for Enonic XP ${{ steps.read_version.outputs.value }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: "build/libs/${{ steps.read_project_name.outputs.value }}-${{ steps.read_version.outputs.value }}.jar"
          asset_name: "${{ steps.read_project_name.outputs.value }}-${{ steps.read_version.outputs.value }}.jar"
          asset_content_type: application/java-archive